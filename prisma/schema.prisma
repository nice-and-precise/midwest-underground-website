// Midwest Underground - Complete Database Schema
// Includes HDD Field Operations Management

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER MANAGEMENT & AUTHENTICATION
// ============================================================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          Role      @default(CREW)
  phone         String?
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  createdProjects       Project[]           @relation("ProjectCreator")
  dailyReports          DailyReport[]       @relation("ReportCreator")
  signedReports         DailyReport[]       @relation("ReportSigner")
  rodPasses             RodPass[]
  inspections           Inspection[]        @relation("InspectionCreator")
  assignedInspections   Inspection[]        @relation("InspectionAssignee")
  correctiveActions     CorrectiveAction[]
  rfis                  RFI[]               @relation("RFICreator")
  rfiResponses          RFI[]               @relation("RFIResponder")
  tmTickets             TMTicket[]
  changeOrders          ChangeOrder[]
  ticket811Responses    Ticket811Response[]
  events                Event[]
  auditLogs             ReportAudit[]

  @@index([email])
  @@index([role])
}

enum Role {
  OWNER
  SUPER
  CREW
}

// ============================================================================
// PROJECT MANAGEMENT
// ============================================================================

model Project {
  id                String              @id @default(cuid())
  name              String
  description       String?
  status            ProjectStatus       @default(PLANNING)
  startDate         DateTime?
  endDate           DateTime?
  budget            Float?
  location          Json?
  customerName      String?
  customerContact   String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  createdById       String

  // Relations
  createdBy         User                @relation("ProjectCreator", fields: [createdById], references: [id])
  bores             Bore[]
  dailyReports      DailyReport[]
  inspections       Inspection[]
  rfis              RFI[]
  tmTickets         TMTicket[]
  changeOrders      ChangeOrder[]
  tickets811        Ticket811[]
  events            Event[]
  pits              Pit[]

  @@index([status])
  @@index([createdById])
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

// ============================================================================
// HDD BORE MANAGEMENT
// ============================================================================

model Bore {
  id              String        @id @default(cuid())
  projectId       String
  name            String
  alignment       Json?         // GeoJSON LineString
  depthProfile    Json?         // [{station, depth, elevation}]
  diameterIn      Float?
  productMaterial String?
  tracerWire      Boolean       @default(false)
  entryPitId      String?
  exitPitId       String?
  status          BoreStatus    @default(PLANNED)
  totalLength     Float?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  project         Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  entryPit        Pit?          @relation("EntryPit", fields: [entryPitId], references: [id])
  exitPit         Pit?          @relation("ExitPit", fields: [exitPitId], references: [id])
  rodPasses       RodPass[]
  inspections     Inspection[]
  rfis            RFI[]
  events          Event[]

  @@index([projectId])
  @@index([status])
}

enum BoreStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

// ============================================================================
// ROD-BY-ROD LOGGING
// ============================================================================

model RodPass {
  id              String    @id @default(cuid())
  boreId          String
  sequence        Int
  passNumber      Int       // 1=Pilot, 2=Ream1, 3=Ream2, etc.
  linearFeet      Float
  fluidMix        String?
  fluidVolumeGal  Float?
  startedAt       DateTime?
  completedAt     DateTime?
  notes           String?
  loggedById      String
  createdAt       DateTime  @default(now())

  // Relations
  bore            Bore      @relation(fields: [boreId], references: [id], onDelete: Cascade)
  loggedBy        User      @relation(fields: [loggedById], references: [id])

  @@index([boreId])
  @@index([sequence])
}

// ============================================================================
// DAILY FIELD REPORTS
// ============================================================================

model DailyReport {
  id              String        @id @default(cuid())
  projectId       String
  reportDate      DateTime
  crew            Json          // [{name, role, hours}]
  production      Json          @default("[]") // [{boreId, activity, lf, startTime, endTime}]
  labor           Json          @default("[]") // [{name, hours, rate, total}]
  equipment       Json          @default("[]") // [{name, hours, rate, total}]
  materials       Json          @default("[]") // [{description, qty, unit, cost, total}]
  weather         Json?         // {condition, temp, impact}
  notes           String?
  photos          Json          @default("[]") // [{url, caption, timestamp}]
  status          ReportStatus  @default(DRAFT)
  signedById      String?
  signedAt        DateTime?
  createdById     String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  project         Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy       User          @relation("ReportCreator", fields: [createdById], references: [id])
  signedBy        User?         @relation("ReportSigner", fields: [signedById], references: [id])
  auditLogs       ReportAudit[]

  @@unique([projectId, reportDate])
  @@index([projectId])
  @@index([reportDate])
  @@index([status])
}

enum ReportStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

model ReportAudit {
  id              String      @id @default(cuid())
  reportId        String
  changedById     String
  changedAt       DateTime    @default(now())
  changes         Json
  snapshot        Json

  // Relations
  report          DailyReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  changedBy       User        @relation(fields: [changedById], references: [id])

  @@index([reportId])
}

// ============================================================================
// INSPECTIONS & QA/QC
// ============================================================================

model Inspection {
  id              String              @id @default(cuid())
  projectId       String
  boreId          String?
  templateName    String?
  items           Json                // [{question, answer, pass/fail, notes, photo}]
  assigneeId      String?
  dueDate         DateTime?
  completedAt     DateTime?
  status          InspectionStatus    @default(OPEN)
  location        Json?
  createdById     String
  createdAt       DateTime            @default(now())

  // Relations
  project         Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  bore            Bore?               @relation(fields: [boreId], references: [id], onDelete: SetNull)
  assignee        User?               @relation("InspectionAssignee", fields: [assigneeId], references: [id])
  createdBy       User                @relation("InspectionCreator", fields: [createdById], references: [id])
  correctiveActions CorrectiveAction[]

  @@index([projectId])
  @@index([status])
}

enum InspectionStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  FAILED
}

model CorrectiveAction {
  id              String    @id @default(cuid())
  inspectionId    String
  description     String
  assigneeId      String
  dueDate         DateTime
  status          CAStatus  @default(OPEN)
  resolution      String?
  closedAt        DateTime?
  createdAt       DateTime  @default(now())

  // Relations
  inspection      Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  assignee        User       @relation(fields: [assigneeId], references: [id])

  @@index([inspectionId])
  @@index([status])
}

enum CAStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
}

// ============================================================================
// RFIs (REQUEST FOR INFORMATION)
// ============================================================================

model RFI {
  id              String      @id @default(cuid())
  projectId       String
  boreId          String?
  question        String
  location        Json?
  requiredBy      DateTime?
  status          RFIStatus   @default(OPEN)
  response        String?
  respondedById   String?
  respondedAt     DateTime?
  attachments     Json        @default("[]")
  createdById     String
  createdAt       DateTime    @default(now())

  // Relations
  project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  bore            Bore?       @relation(fields: [boreId], references: [id], onDelete: SetNull)
  createdBy       User        @relation("RFICreator", fields: [createdById], references: [id])
  respondedBy     User?       @relation("RFIResponder", fields: [respondedById], references: [id])
  tmTickets       TMTicket[]
  changeOrders    ChangeOrder[]

  @@index([projectId])
  @@index([status])
}

enum RFIStatus {
  OPEN
  ANSWERED
  CLOSED
}

// ============================================================================
// T&M TICKETS (TIME & MATERIALS)
// ============================================================================

model TMTicket {
  id              String        @id @default(cuid())
  projectId       String
  rfiId           String?
  lineItems       Json          // [{description, qty, unit, rate, total}]
  status          TMStatus      @default(DRAFT)
  approvedById    String?
  approvedAt      DateTime?
  photos          Json          @default("[]")
  signature       Json?         // {data, timestamp, name}
  createdById     String
  createdAt       DateTime      @default(now())

  // Relations
  project         Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  rfi             RFI?          @relation(fields: [rfiId], references: [id], onDelete: SetNull)
  createdBy       User          @relation(fields: [createdById], references: [id])
  changeOrders    ChangeOrder[]

  @@index([projectId])
  @@index([status])
}

enum TMStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

// ============================================================================
// CHANGE ORDERS
// ============================================================================

model ChangeOrder {
  id              String      @id @default(cuid())
  projectId       String
  tmTicketId      String?
  rfiId           String?
  scope           String
  pricing         Json?
  budgetImpact    Float?
  status          COStatus    @default(PENDING)
  approvedById    String?
  approvedAt      DateTime?
  createdById     String
  createdAt       DateTime    @default(now())

  // Relations
  project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tmTicket        TMTicket?   @relation(fields: [tmTicketId], references: [id], onDelete: SetNull)
  rfi             RFI?        @relation(fields: [rfiId], references: [id], onDelete: SetNull)
  createdBy       User        @relation(fields: [createdById], references: [id])

  @@index([projectId])
  @@index([status])
}

enum COStatus {
  PENDING
  APPROVED
  REJECTED
}

// ============================================================================
// 811 COMPLIANCE TRACKING
// ============================================================================

model Ticket811 {
  id              String              @id @default(cuid())
  projectId       String
  ticketNumber    String
  ticketDate      DateTime
  expirationDate  DateTime
  status          Ticket811Status     @default(ACTIVE)
  notes           String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relations
  project         Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  responses       Ticket811Response[]

  @@index([projectId])
  @@index([expirationDate])
  @@index([status])
}

enum Ticket811Status {
  ACTIVE
  EXPIRED
  RENEWED
}

model Ticket811Response {
  id              String      @id @default(cuid())
  ticketId        String
  utilityName     String
  responseType    String?     // "Positive", "Clear", etc.
  responseDate    DateTime
  locatePhotos    Json        @default("[]")
  marksDescription String?
  respondedById   String
  createdAt       DateTime    @default(now())

  // Relations
  ticket          Ticket811   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  respondedBy     User        @relation(fields: [respondedById], references: [id])

  @@index([ticketId])
}

// ============================================================================
// EVENTS & LOGGING
// ============================================================================

model Event {
  id              String    @id @default(cuid())
  projectId       String
  boreId          String?
  type            String    // "frac-out", "obstruction", "equipment-failure", etc.
  location        Json?
  description     String
  photos          Json      @default("[]")
  timestamp       DateTime  @default(now())
  createdById     String

  // Relations
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  bore            Bore?     @relation(fields: [boreId], references: [id], onDelete: SetNull)
  createdBy       User      @relation(fields: [createdById], references: [id])

  @@index([projectId])
  @@index([timestamp])
}

// ============================================================================
// PITS
// ============================================================================

model Pit {
  id              String    @id @default(cuid())
  projectId       String
  boreId          String?
  type            String?   // "entry", "exit", "intermediate"
  location        Json?     // {lat, lon}
  elevation       Float?
  notes           String?
  photos          Json      @default("[]")
  createdAt       DateTime  @default(now())

  // Relations
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  entryBores      Bore[]    @relation("EntryPit")
  exitBores       Bore[]    @relation("ExitPit")

  @@index([projectId])
}
